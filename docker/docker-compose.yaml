version: '3.7'
services:
  script:
    container_name: script
    hostname: script
    build:
      context: ../services/script
      dockerfile: Dockerfile
    restart: never
    deploy:
      resources:
          limits:
            cpus: "2"
            # memory: 150M
      replicas: 1
      restart_policy:
        max_attempts: 3
        condition: on-failure
      update_config:
        parallelism: 3
        delay: 5s
    networks:
      - scraps
    volumes:
      - /usr/app/scrapper/data/script:/usr/app/data
      - /usr/app/scrapper/data/script/log:/usr/app/data/log

  api:
    container_name: api
    hostname: api
    build:
      context: ../services/api
      dockerfile: Dockerfile
    ports:
      - ${API_PORT}:${API_PORT}
    restart: always
    deploy:
      # resources:
      #     limits:
      #       cpus: "2"
            # app will crash if enough memory is not provided
            # memory: 150M
      replicas: 1
      restart_policy:
        max_attempts: 3
        condition: on-failure
      update_config:
        parallelism: 3
        delay: 5s
    networks:
      - scraps
    user: root
    volumes:
      - /usr/app/scrapper/data/api:/usr/app/data
      - /usr/app/scrapper/data/api/log:/usr/app/data/log
      - ../services/script:/usr/app/data/api/script
      - /var/run/docker.sock:/var/run/docker.sock # host and the container will share the same docker engine

  web:
    container_name: web
    hostname: web
    build:
      context: ../services/web
      dockerfile: Dockerfile
    deploy:
      resources:
          limits:
            cpus: "1"
      replicas: 1
      restart_policy:
        max_attempts: 3
        condition: on-failure
      update_config:
        parallelism: 3
        delay: 5s
    depends_on:
      - api
    restart: always
    networks:
      - scraps

  reverse_proxy:
    container_name: reverse_proxy
    hostname: reverse_proxy
    image: nginx:alpine
    deploy:
      resources:
          limits:
            cpus: "1"
      replicas: 1
      restart_policy:
        max_attempts: 3
        condition: on-failure
      update_config:
        parallelism: 3
        delay: 5s
    depends_on:
      - api
      - web
    ports:
      - ${REVERSE_PROXY_PORT}:80
    restart: unless-stopped
    volumes:
      - ../configs/reverse_proxy:/etc/nginx/templates:ro
      - /usr/app/scrapper/data/reverse_proxy/log:/var/log/nginx
    networks:
      - scraps

networks:
  scraps:
    driver: bridge